% Saved by Prover9-Mace4 Version 0.5B, March 2008 (Dec 2007 LADR).

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  assign(max_seconds, 120).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 360).
end_if.

formulas(assumptions).

%	EXISTENTIAL
%-------------------------------

(exists x (eveningGown(x) 			-> dress(x))).
(exists x (dinnerParty(x)	 		-> informalOccasion(x))).
(exists x (businessMeeting(x)	 	-> informalOccasion(x))).
(exists x (theatreOpeningNight(x) 	-> semiFormalOccasion(x))).
(exists x (charityBall(x) 			-> semiFormalOccasion(x))).
(exists x (stateDinner(x) 			-> formalOccasion(x))).
(exists x (wedding(x) 				-> formalOccasion(x))).

%   SUBCLASS AXIOMS
%------------------------------------
%Value Partition
%- - - - - - - - - - - - - - - - - - - - - - - - 
(all x (woman(x) 				-> gender(x))).
(all x (man(x) 					-> gender(x))).

%Domain Concept
%- - - - - - - - - - - - - - - - - - - - - - - - 
(all x (individualGarment(x) 	-> clothing(x))).
	(all x (accompanimentGarment(x)	-> individualGarment(x))).
		(all x (jacket(x) 				-> accompanimentGarment(x))).
		(all x (neckApparel(x) 			-> accompanimentGarment(x))).
	(all x (footwear(x)			-> individualGarment(x))).
	(all x (lowerGarment(x)		-> individualGarment(x))).
	(all x (upperGarment(x)		-> individualGarment(x))).
(all x (suit(x)					-> clothing(x))).
	(all x (mensSuit(x)				-> setOfGarments(x))).
		(all x (threePieceSuit(x)		-> mensSuit(x))).
		(all x (twoPieceSuit(x)			-> mensSuit(x))).
	(all x (feminineSuit(x)			-> setOfGarments(x))).
		(all x (dressSuit(x)			-> feminineSuit(x))).
		(all x (skirtSuit(x)			-> feminineSuit(x))).
		(all x (pantSuit(x)				-> feminineSuit(x))).

%   DEPENDENCE AXIOMS
%--------------------------------

% All outfits include a garment that is worn over the torso and is not an accompaniment garment
	(all x all y 
	(outfit(x) & torso(y))
	-> 
	(exists z (garment(z) & worn_over(z,y) & component_of(z,x) & -accompanimentGarment(z)))).

% All outfits include a garment that is worn over the legs and is not an accompaniment garment
	(all x all y 
	(outfit(x) & legs(y))
	-> 
	(exists z (garment(z) & worn_over(z,y) & component_of(z,x) & -accompanimentGarment(z)))).

% All outfits include a garment that is worn over the torso and is not an accompaniment garment
	(all x all y 
	(outfit(x) & feet(y))
	-> 
	(exists z (garment(z) & worn_over(z,y) & component_of(z,x) & -accompanimentGarment(z)))).

%All mens suits consist of pants and a jacket of the same color
	(all x 
	(mensSuit(x)
	-> 
	(exists y exists z (mensPants(y) & mensJacket(z) & color(c) & dyed(y,c) 
	& dyed(z,c))))).

%All garments are dyed a color
	(all x 
	(garment(x)) 
	-> 
	(exists c (color(c) & dyed(x,c)))).
	
%All garments have a targeted gender
	(all x 
	(garment(x)) 
	-> 
	(exists y (gender(y) & targeted-to(x,y)))).

%   DEFINITIONS
%--------------------------------

% Garment Definitions
%- - - - - - - - - - - - - - - - - - - - 

% Women's garments are garments targeted to womans 
(all x all y 
(womensGarment(x) 
<-> 
(garment(x) & woman(z) & targeted_to(x,y)))). 

% Men's garments are garments targeted to mans
(all x all y 
(mensGarment(x) 
<-> 
(garment(x) & man(y) & targeted_to(x,y)))). 

% Women's outfits are outfits worn by womans
(all x all y 
(womensOutfit(x) 
<-> 
(outfit(x) & woman(z) & targeted_to(x,y)))). 

% Mens's outfits are outfits worn by mans
(all x all y 
(mensOutfit(x) 
<-> 
(outfit(x) & man(z) & targeted_to(x,y)))). 

% Men's garments are not women's garments
(all x (mensGarment(x) <-> -womensGarments(x))).

%Lower garments are garments worn over the legs 
(all x all y
(lowerGarment(x) 
<-> 
(garment(x) & legs(y) & worn_over(x,y)))). 

%Upper garments are garments worn over the torso 
(all x all y
(upperGarment(x) 
<-> 
(garment(x) & torso(y) & worn_over(x,y)))). 

%Footwear are garments worn over the feet 
(all x all y
(footwear(x) 
<-> 
(garment(x) & feet(y) & worn_over(x,y)))). 

% Outfit Definitions
%- - - - - - - - - - - - - - - - - - - - 

% A formal outfit is an outfit that conform to a formal dress code
(all x all y 
(formalOutfit(x))
<->
(outfit(x) & formal(y) & conforms(x,y))).

% A semi-formal outfit is an outfit that conform to a semi-formal dress code
(all x all y 
(semiFormalOutfit(x))
<->
(outfit(x) & semiFormal(y) & conforms(x,y))).

% An informal outfit is an outfit that conform to a informal dress code
(all x all y 
(informalOutfit(x))
<->
(outfit(x) & informal(y) & conforms(x,y))).

%   DISJOINTNESS AXIOMS
%---------------------------------

% If something is targeted to a man it is not targeted to a woman
% (all x all y all z (man(x) & woman(y) & targeted_to(z,x) -> -targeted_to(f)

%   SORT CONSTRAINTS
%--------------------------------

% Garments are dyed colors
(all x all y (suggest(x,y))->(event(x) & dressCode(y))).

% Events suggest dress codes
(all x all y (suggest(x,y))->(event(x) & dressCode(y))).

% Outfits conform to dress codes
(all x all y (conforms(x,y))->(outfit(x) & dressCode(y))).

% Outfits are suitable for events
(all x all y (suitable(x,y))->(outfit(x) & event(y))).

% Dress codes govern outfits
(all x all y (governs(x,y))->(dressCode(x) & outfit(y))).

% Events permit outfits
(all x all y (permits(x,y))->(event(x) & outfit(y))).

% Garments are a component of outfits
(all x all y (component_of(x,y))->(garment(x) & outfit(y))).

% Outfits include garments
(all x all y (include(x,y))->(outfit(x) & garment(y))).

% Outfits are worn by genders
(all x all y (worn_by(x,y))->(outfit(x) & gender(y))).

% Garments are targeted to genders
(all x all y (targeted_to(x,y))->(garment(x) & gender(y))).

% Garments are worn over things
(all x all y (worn_over(x,y))->(garment(x))).

% Garments are worn under garments
%(all x all y (worn_under(x,y))->(garment(x) & garment(y))).

% Garments cover body segments
(all x all y (cover(x,y))->(garment(x) & bodySegment(y))).

% Body segments are covered by garments
(all x all y (worn_over(x,y))->(garment(x) & garment(y))).

%   UNIQUENESS (i.e. FUNCTIONAL PROPERTY)
%----------------------------------------

%  An outfit can only cover a body segment with one garment
%(all x all y all z
%(covers(x,z) & covers(y,z))
%->
%(x=y))

%   PROPERTIES OF RELATIONS
%----------------------------------------

%   Inverse Relation
%- - - - - - - - - - - - - - - - - - - - - - - - 
(all x all y (include(x,y) <-> components_of(y,x))).
(all x all y (permits(x,y) <-> suitable(y,x))).
(all x all y (governs(x,y) <-> components_of(y,x))).
%(all x all y (worn_over(x,y) <-> worn_under(y,x))).
(all x all y (covers(x,y) <-> covered_by(y,x))).

%   SubProperty of Relation Chain
%- - - - - - - - - - - - - - - -  - - - - - - 

% If an event suggest a dress code and that dress code governs a set of 
% outfits than that event permits those outfits.
(all x all y all z 
(suggest(x,y) & governs(y,z))
->
(permits(x,z))).

% All components of an outfit that is worn by a gender are targeted to that gender
(all x all y all z 
(components_of(x,y) & worn_by(y,z))
->
(targeted_to(x,z))). 

%   Transitive Relations
%- - - - - - - - - - - - - - - -  - - - - - - 

% worn_over is a transitive relation

(all x all y all z
(worn_over(x,y) & worn_over(y,z))
->
worn_over(x,z)).

end_of_list.

formulas(goals).

(exists w exists x exists y exists z 
(eveningGown(w) & theatreOpeningNight(x) & woman(y) & garment_of(w,z))
->
(has_genderDes(x,y) & is_eventAppropriate(z,x))).

end_of_list.

